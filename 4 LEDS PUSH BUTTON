# Lab-report-3

////The goal of this project is to utilize classes to regulate the behavior of four LEDs via pushbutton.
/// The LEDs' LOW or HIGH status can be altered by pressing the button, by turning on the next LED.
main code

#include "PUB_4Leds.h"

PUB_4Leds flash(4,10,11,12,13);/// (pushbutton, LED1, LED2, LED3, LED4)


void setup() {
 
  }

void loop(){
  flash.task();
  }
  
  cpp
  #include "PUB_4Leds.h"
  int  initial    = 0;       // current  initial
int oldstate    = 0;       //last  initial
int buttonstate = 0;      // variable for reading the button status

PUB_4Leds::PUB_4Leds(int PB, int led1, int led2, int led3, int led4){
  pinMode(PB, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);

  _PB = PB;
  _led1 = led1;
  _led2 = led2;
  _led3 = led3;
  _led4 = led4;
 
}
void PUB_4Leds::task(){

//debouncing process to read button
  buttonstate = digitalRead(_PB);  //state the  initial of button
  if(buttonstate == HIGH){               // if button pressed 
    delay(50);
    buttonstate = digitalRead(_PB);//checking button state
    if(buttonstate == LOW){              //if it is 0 considered one press
     initial = oldstate + 1;        //increase  initial by each press
    }
  }else{                          //check if it has been NOT pressed
      delay(100);
      }
   switch (initial){               //react to button press a  initial
     case 1:                     //if  initial is 1
       digitalWrite(_led1, HIGH);//on
       digitalWrite(_led2, LOW);//off
       digitalWrite(_led3, LOW);//off
       digitalWrite(_led4, LOW);//off
       oldstate =  initial;               //set oldstate  initial as current  initial
       break;
     case 2:
       digitalWrite(_led1, LOW);//off
       digitalWrite(_led2, HIGH);//on
       digitalWrite(_led3, LOW);//off
       digitalWrite(_led4, LOW);//off
       oldstate =  initial;
       break;
     case 3:
       digitalWrite(_led1, LOW);//off
       digitalWrite(_led2, LOW);//off
       digitalWrite(_led3, HIGH);//on
       digitalWrite(_led4, LOW);//off
       oldstate =  initial;
       break;      
       case 4:
       digitalWrite(_led1, LOW);//off
       digitalWrite(_led2, LOW);//off
       digitalWrite(_led3, LOW);//off
       digitalWrite(_led4, HIGH);//on
       oldstate =  initial;
       break;   
     default:                      //Last step , turning all lights off
       digitalWrite(_led1, LOW);//off
       digitalWrite(_led2, LOW);//off
       digitalWrite(_led3, LOW);//off
       digitalWrite(_led4, LOW);//off
       oldstate = 0;                    
       break;         
     }
}


header 

#ifndef PUB_4Leds_H
#define PUB_4Leds_H
#include "arduino.h"

class PUB_4Leds {
  public:
  PUB_4Leds(int PB, int led1, int led2, int led3, int led4);
  void task();
  int _PB;
  int _led1;
  int _led2;
  int _led3;
  int _led4;
};
#endif
